clear all
clc
format long
%%% MPhi Analysis for DR Rectangular section - Using Layer by Layer approach %%%
%%% Using Hognestad's Model for fcc calculation %%%
%%% Tensile strength of concrete is considered till first crack, ecr %%%
%%% For Normal strength concrete %%%

noofplots = input("enter noof plots:");
count = 0;
while count<=noofplots
    Ptc = input("enter Ptc:");
    Ptt = input("enter Ptt:");
    if Ptc==-1
        break
    end
    hold on;
    myfun(Ptc,Ptt);
end

function [list_phi,list_M] = myfun(Ptc,Ptt)
% Geometric Properties
B = 200;                    % Width of the beam (mm)
D = 500;                    % Total depth of the beam (mm)
dc = 40;                    % Effective cover to the R/f (mm)
dcr = 25;                   % c/c distance between two layer of R/f (mm)               
d = D - dc;                 % Effective depth of the beam (mm)
% Ptc = 0;                % Percentage of compression steel
% Ptt = 0.4;              % Percentage of Tension steel
Asc = Ptc * B * D/100;      % Area of Compression steel reinforcement (mm^2)
Ast = Ptt * B * D/100;      % Total Area of Tension steel reinforcement (mm^2)
Ast1 = Ast/2;               % Area of Tension steel in Layer 1 (mm^2)
Ast2 = Ast/2;               % Area of Tension steel in Layer 2 (mm^2)
A = B*D;                    % Area of cross section (mm^2)
I = B*D.^3/12;               % Moment of Inertia of the section (mm^4)
Y = D/2;                    % Max depth of N.A. (mm)
Z = I/Y;                    % Section modulus (mm^3)
t = 1;                      % Thickness of each layer (mm)
% Material Properties
Es = 200*1e3;                     % Young's modulus (MPa)
fc = 40;                          % Concrete compressive strength (MPa) 
fy = 500;                         % Yield strength (MPa)
ec = 0.002;                       % Ultimate concrete strain
fck = (1.25 * fc - 1.65 * 5);     % Characteristic comp strength (MPa)
Ec = 5000 * sqrt(fck);            % Modulus of elasticity of Concrete (MPa)
fcr = 0.7 * sqrt(fck);            % modulus of rupture
ecr = fcr / Ec;                   % rupture strain (at first tensile crack)
eccmax = 0.0035;                  % Max compressive strain in concrete
estmax = 0.12;                    % Max strain in Tension R/f
escmax = 0.12;                    % Max strain in Compression R/f 


% Other required parameters
nl = d / t;                 % No of layers
ectop = 0;                 % Starting with ectop = 0
xu = d;                    % Starting iteration with xu(depth of NA) = d
list_phi = [];             % defining null matrix of phi
list_Mu = [];
while ectop <= eccmax

    while true
        sum_Cc = 0;           % Defining zeros matrix for sum_Cc
        sum_Ct = 0;
        sum_Ts = 0;
        sum_Mu1 = 0;
        counter = 0;
        while counter <= nl
            counter = counter + 1;       
%      () = () + 1 - To start next loop or take next value
%       Counter - Iterative Integer varying from 1 to no. of layers           
            y_bar = xu - ((counter-1) * t + (t / 2));
            y_bar_cr = (xu - dc);
            y_bar_tr1 = (d - xu);
            y_bar_tr2 = (d - dcr - xu);
            ecl = (ectop / xu) * y_bar;
            es_cr = ((ectop / xu) * y_bar_cr);
            es_tr1 = ((ectop / xu) * y_bar_tr1);
            es_tr2 = ((ectop / xu) * y_bar_tr2);
            
            es_cr = min(es_cr,escmax);
            es_tr1 = min(es_tr1,estmax);
            es_tr2 = min(es_tr2,estmax);
%       y_bar = Centroidal distance of each layer from Xu
%       ybar_cR = Centroidal distance of compressive Reinforcement from xu
%       ybar_tR = Centroidal distance of Tensile Reinforcement from xu
%       ecl = Strain in each layer of conrete
%       es_cr/es_tr = strain in Comp and Tensile R/f

            if ecl > 0
                fcc = fc * (((2 * (ecl / ec)) - ((ecl / ec).^2)));
            else
                fcc = 0;
            end
            if ectop < ecr
                if ecl < 0
                    fct = ecl * Ec;
                else
                    fct = 0;
                end
            else
                fct = 0;
            end
%      - Using Hognestad's parabolic model for calculating compressive
%        stresses in concrete i.e fcc      
%      - Assuming Linear stress-strain relation for concrete in Tension            

            if es_tr1 < (fy / Es)
                fst1 = es_tr1 * Es;
            else
                fst1 = fy;
            end
            
            if es_tr2 < (fy / Es)
                fst2 = es_tr2 * Es;
            else
                fst2 = fy;
            end
            
            if es_cr < (fy / Es)
                fsc = es_cr * Es;
            else
                fsc = fy;
            end
%        fst, fsc = Stress in Tensile and Comp R/f.              

            Cc = fcc * B * t;
            Ct = fct * B * t;
            Cs = fsc * Asc;
            Ts1 = fst1 * Ast1;
            Ts2 = fst2 * Ast2;
            
            Mu1 = (Cc * y_bar) + (Ct * y_bar);
            sum_Mu1 = sum_Mu1 + Mu1;

            sum_Cc = sum_Cc + Cc;
            sum_Ct = sum_Ct + Ct;
%       Cc = Compressive force in each layer of Concrete
%       Ct = Tensile force in each layer of Concrete 
%       Cs / Ts = Comp and Tensile force in R/f
%       Mu1 = Moment due to force in each layer of concrete ( Cc and Ct)
%       sum_Cc = sum of all compressive forces in Concrete
%       sum_Ct = sum of all Tensile forces in Concrete
%       sum_Mu1 = sum of all moments due to each layer in concrete
        end
        
        Mu2 =  (Cs * y_bar_cr);
        Mu3 = (Ts1 * y_bar_tr1);
        Mu4 = (Ts2 * y_bar_tr2);
        Mu = (sum_Mu1 + Mu2 + Mu3 + Mu4) / 1e6;
%       Mu = Total moment due to Reinforcements and concrete.
%       Lever arm is conisdered from xu.

        if abs(sum_Cc + sum_Ct) + abs(Cs) - abs(Ts1) - abs(Ts2) < 1
       %fprintf('for ectop:%f, parameters: xu:%f, sum_Cc:%f, sum_Ct:%f, Mu:%f\n', ectop, xu, sum_Cc, sum_Ct, Mu);
%      Equilibrium condition of forces - C=T -->> Cc+Cs-Ct-Ts = 0
            break;
        end
        xu = xu - 0.0001 * d;
%       Increment in xu is in 1e-4 mm.
    end

    
    phi = (ectop / xu) * 1e6;
    fprintf('for ectop:%f, parameters: xu:%f, sum_Cc:%f, sum_Ct:%f, Mu:%f, phi:%f, Ts1+Ts2:%f\n', ectop, xu, sum_Cc, sum_Ct, Mu,phi,Ts1+Ts2);
    fprintf('for r:%f\n', sum_Cc+sum_Ct+Cs-Ts1-Ts2);
    list_phi = [list_phi, phi];
    list_Mu = [list_Mu, Mu];
    ectop = ectop + 0.00001;
    n_i = eccmax / 0.00001;
%       phi = Curvature due to each xu - from varying top strain (ectop)    
%       list_phi = values of phi for strain varying from 0 - ecmax
%       list_Mu = values of Mu for strain varying from 0 - ecmax
%       With increment of 1e-5. 
end

%       Plot = Graph of Moment vs Curvature for different strains
plot(list_phi, list_Mu);
xlabel('Phi - 1/mm 10^-6');
ylabel('Mu - KNm');
title('M vs Phi for Rect section - NSC - Layer by Layer');
grid on;
end
%%%%%%%%%%--------  CODE IS FINISHED   --------%%%%%%%%%%
